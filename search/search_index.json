{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Blocky Blocky is a DNS proxy and ad-blocker for the local network written in Go with following features: Features Blocking - Blocking of DNS queries with external lists (Ad-block, malware) and whitelisting Definition of black and white lists per client group (Kids, Smart home devices, etc.) Periodical reload of external black and white lists Blocking of request domain, response CNAME (deep CNAME inspection) and response IP addresses (against IP lists) Advanced DNS configuration - not just an ad-blocker Custom DNS resolution for certain domain names Conditional forwarding to external DNS server Upstream resolvers can be defined per client group Performance - Improves speed and performance in your network Customizable caching of DNS answers for queries -> improves DNS resolution speed and reduces amount of external DNS queries Prefetching and caching of often used queries Using multiple external resolver simultaneously Low memory footprint Various Protocols - Supports modern DNS protocols DNS over UDP and TCP DNS over HTTPS (aka DoH ) DNS over TLS (aka DoT ) Security and Privacy - Secure communication Supports modern DNS extensions: DNSSEC , eDNS , ... Free configurable blocking lists - no hidden filtering etc. Provides DoH Endpoint Uses random upstream resolvers from the configuration - increases your privacy through the distribution of your DNS traffic over multiple provider Open source development Blocky does NOT collect any user data, telemetry, statistics etc. Integration - various integration Prometheus metrics Prepared Grafana dashboard Logging of DNS queries per day / per client in CSV format - easy to analyze Statistics report via CLI Various REST API endpoints CLI tool Simple configuration - single configuration file in YAML format Simple to maintain Simple to backup Simple installation/configuration - blocky was designed for simple installation Stateless (no database, no temporary files) Docker image with Multi-arch support Single binary Supports x86-64 and ARM architectures -> runs fine on Raspberry PI Community supported Helm chart for k8s deployment Contribution Issues, feature suggestions and pull requests are welcome! Blocky lives on GitHub .","title":"Welcome"},{"location":"#blocky","text":"Blocky is a DNS proxy and ad-blocker for the local network written in Go with following features:","title":"Blocky"},{"location":"#features","text":"Blocking - Blocking of DNS queries with external lists (Ad-block, malware) and whitelisting Definition of black and white lists per client group (Kids, Smart home devices, etc.) Periodical reload of external black and white lists Blocking of request domain, response CNAME (deep CNAME inspection) and response IP addresses (against IP lists) Advanced DNS configuration - not just an ad-blocker Custom DNS resolution for certain domain names Conditional forwarding to external DNS server Upstream resolvers can be defined per client group Performance - Improves speed and performance in your network Customizable caching of DNS answers for queries -> improves DNS resolution speed and reduces amount of external DNS queries Prefetching and caching of often used queries Using multiple external resolver simultaneously Low memory footprint Various Protocols - Supports modern DNS protocols DNS over UDP and TCP DNS over HTTPS (aka DoH ) DNS over TLS (aka DoT ) Security and Privacy - Secure communication Supports modern DNS extensions: DNSSEC , eDNS , ... Free configurable blocking lists - no hidden filtering etc. Provides DoH Endpoint Uses random upstream resolvers from the configuration - increases your privacy through the distribution of your DNS traffic over multiple provider Open source development Blocky does NOT collect any user data, telemetry, statistics etc. Integration - various integration Prometheus metrics Prepared Grafana dashboard Logging of DNS queries per day / per client in CSV format - easy to analyze Statistics report via CLI Various REST API endpoints CLI tool Simple configuration - single configuration file in YAML format Simple to maintain Simple to backup Simple installation/configuration - blocky was designed for simple installation Stateless (no database, no temporary files) Docker image with Multi-arch support Single binary Supports x86-64 and ARM architectures -> runs fine on Raspberry PI Community supported Helm chart for k8s deployment","title":"Features"},{"location":"#contribution","text":"Issues, feature suggestions and pull requests are welcome! Blocky lives on GitHub .","title":"Contribution"},{"location":"additional_information/","text":"Additional information Print current configuration To print runtime configuration / statistics, you can send SIGUSR1 signal to running process. Summary Example output: INFO server: current configuration: INFO server: -> resolver: 'ClientNamesResolver' INFO server: singleNameOrder = \"[2 1]\" INFO server: externalResolver = \"upstream 'tcp+udp:192.168.178.1:53'\" INFO server: cache item count = 7 INFO server: -> resolver: 'QueryLoggingResolver' INFO server: logDir= \"/logs\" INFO server: perClient = false INFO server: logRetentionDays= 7 INFO server: -> resolver: 'StatsResolver' INFO server: stats: INFO server: - Top 20 queries INFO server: - Top 20 blocked queries INFO server: - Query count per client INFO server: - Reason INFO server: - Query type INFO server: - Response type INFO server: -> resolver: 'MetricsResolver' INFO server: metrics: INFO server: Enable = true INFO server: Path = /metrics INFO server: -> resolver: 'ConditionalUpstreamResolver' INFO server: fritz.box = \"parallel upstreams 'upstream 'tcp+udp:192.168.178.1:53''\" INFO server: -> resolver: 'CustomDNSResolver' INFO server: runtime information: ... INFO server: MEM Alloc = 9 MB INFO server: MEM HeapAlloc = 9 MB INFO server: MEM Sys = 88 MB INFO server: MEM NumGC = 1533 INFO server: RUN NumCPU = 4 INFO server: RUN NumGoroutine = 18 Hint To send a signal to a process you can use kill -s USR1 <PID> or docker kill -s SIGUSR1 blocky for docker setup Statistics blocky collects statistics and aggregates them hourly. If signal SIGUSR2 is received, this will print statistics for last 24 hours: Top 20 queried domains Top 20 blocked domains Query count per client ... Summary Example output: INFO stats_resolver: ******* STATS 24h ******* INFO stats_resolver: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 INFO stats_resolver: \u2502 Top 20 queries \u2502 INFO stats_resolver: \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 INFO stats_resolver: \u2502 123.fritz.box \u2502 5760 \u2502 INFO stats_resolver: \u2502 checkip.12344567.com \u2502 1431 \u2502 INFO stats_resolver: \u2502 wpad.fritz.box \u2502 379 \u2502 INFO stats_resolver: \u2502 raw.githubusercontent.com \u2502 299 \u2502 INFO stats_resolver: \u2502 grafana.com \u2502 288 \u2502 INFO stats_resolver: \u2502 www.google.com \u2502 224 \u2502 INFO stats_resolver: \u2502 www.youtube.com \u2502 193 \u2502 INFO stats_resolver: \u2502 www.googleapis.com \u2502 169 \u2502 INFO stats_resolver: \u2502 fritz.box \u2502 156 \u2502 INFO stats_resolver: \u2502 incoming.telemetry.mozilla.org \u2502 148 \u2502 INFO stats_resolver: \u2502 android.googleapis.com \u2502 114 \u2502 INFO stats_resolver: \u2502 userlocation.googleapis.com \u2502 101 \u2502 INFO stats_resolver: \u2502 play.googleapis.com \u2502 100 \u2502 INFO stats_resolver: \u2502 safebrowsing.googleapis.com \u2502 97 \u2502 INFO stats_resolver: \u2502 api-mifitsdfsdfsdfi.com \u2502 84 \u2502 INFO stats_resolver: \u2502 connectivitycheck.gstatic.com \u2502 75 \u2502 INFO stats_resolver: \u2502 fonts.gstatic.com \u2502 66 \u2502 INFO stats_resolver: \u2502 i.ytimg.com \u2502 62 \u2502 INFO stats_resolver: \u2502 android.clients.google.com \u2502 55 \u2502 INFO stats_resolver: \u2502 play.google.com \u2502 50 \u2502 INFO stats_resolver: \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518 INFO stats_resolver: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 INFO stats_resolver: \u2502 Top 20 blocked queries \u2502 INFO stats_resolver: \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2524 INFO stats_resolver: \u2502 incoming.telemetry.mozilla.org \u2502 148 \u2502 INFO stats_resolver: \u2502 googleads.g.doubleclick.net \u2502 47 \u2502 INFO stats_resolver: \u2502 data.mistat.intl.xiaomi.com \u2502 29 \u2502 INFO stats_resolver: \u2502 ssl.google-analytics.com \u2502 25 \u2502 INFO stats_resolver: \u2502 app-measurement.com \u2502 25 \u2502 INFO stats_resolver: \u2502 www.googletagmanager.com \u2502 24 \u2502 INFO stats_resolver: \u2502 www.googleadservices.com \u2502 23 \u2502 INFO stats_resolver: \u2502 privatestats.whatsapp.net \u2502 22 \u2502 INFO stats_resolver: \u2502 find.api.micloud.xiaomi.net \u2502 21 \u2502 INFO stats_resolver: \u2502 sdkconfig.ad.intl.xiaomi.com \u2502 18 \u2502 INFO stats_resolver: \u2502 sessionssdfsdfasdfam \u2502 16 \u2502 INFO stats_resolver: \u2502 pagead2.googlesyndication.com \u2502 16 \u2502 INFO stats_resolver: \u2502 firebase-settings.crashlytics.com \u2502 16 \u2502 INFO stats_resolver: \u2502 abroad.apilocate.amap.com \u2502 16 \u2502 INFO stats_resolver: \u2502 www.google-analytics.com \u2502 15 \u2502 INFO stats_resolver: \u2502 tracking.intl.miui.com \u2502 15 \u2502 INFO stats_resolver: \u2502 resolver.asdfsadfsdfsdfsdfsdfd \u2502 14 \u2502 INFO stats_resolver: \u2502 adfgdfgsfgdg \u2502 14 \u2502 INFO stats_resolver: \u2502 adservice.google.com \u2502 14 \u2502 INFO stats_resolver: \u2502 www.tns-cdfgffgdfg \u2502 12 \u2502 INFO stats_resolver: \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 INFO stats_resolver: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 INFO stats_resolver: \u2502 Query count per client \u2502 INFO stats_resolver: \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 INFO stats_resolver: \u2502 sdf.fritz.box \u2502 6338 \u2502 INFO stats_resolver: \u2502 dfdgsfgsfg.fritz.box \u2502 2075 \u2502 INFO stats_resolver: \u2502 df.fritz.box \u2502 1484 \u2502 INFO stats_resolver: \u2502 sdfgsdfg.fritz.box \u2502 1129 \u2502 INFO stats_resolver: \u2502 Android-3.fritz.box \u2502 1007 \u2502 INFO stats_resolver: \u2502 dfgsdfgsdfgsdf.fritz.box \u2502 956 \u2502 INFO stats_resolver: \u2502 172.20.0.2 \u2502 833 \u2502 INFO stats_resolver: \u2502 345345354353453iNote.fritz.box \u2502 393 \u2502 INFO stats_resolver: \u2502 R334534545-D.fritz.box \u2502 359 \u2502 INFO stats_resolver: \u2502 Android-2.fritz.box \u2502 347 \u2502 INFO stats_resolver: \u2502 Android.fritz.box \u2502 317 \u2502 INFO stats_resolver: \u2502 wererrw-TV.fritz.box \u2502 244 \u2502 INFO stats_resolver: \u2502 dfsdf-dfsddsdfsdf.fritz.box \u2502 77 \u2502 INFO stats_resolver: \u2502 sdfdf.fritz.box \u2502 18 \u2502 INFO stats_resolver: \u2502 sdfsdffsd.fritz.box \u2502 10 \u2502 INFO stats_resolver: \u2502 android-936072d2983c456a.fritz.box \u2502 8 \u2502 INFO stats_resolver: \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518 INFO stats_resolver: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 INFO stats_resolver: \u2502 Reason \u2502 INFO stats_resolver: \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 INFO stats_resolver: \u2502 CONDITIONAL \u2502 6518 \u2502 INFO stats_resolver: \u2502 CACHED \u2502 5431 \u2502 INFO stats_resolver: \u2502 BLOCKED (ads) \u2502 1104 \u2502 INFO stats_resolver: \u2502 RESOLVED (1.1.1.1:53) \u2502 928 \u2502 INFO stats_resolver: \u2502 RESOLVED (9.9.9.9:53) \u2502 630 \u2502 INFO stats_resolver: \u2502 RESOLVED (80.241.218.68:53) \u2502 374 \u2502 INFO stats_resolver: \u2502 RESOLVED (89.233.43.71:53) \u2502 277 \u2502 INFO stats_resolver: \u2502 RESOLVED (46.182.19.48:53) \u2502 177 \u2502 INFO stats_resolver: \u2502 RESOLVED (91.239.100.100:53) \u2502 77 \u2502 INFO stats_resolver: \u2502 CUSTOM DNS \u2502 39 \u2502 INFO stats_resolver: \u2502 BLOCKED (kids) \u2502 14 \u2502 INFO stats_resolver: \u2502 BLOCKED IP (ads) \u2502 9 \u2502 INFO stats_resolver: \u2502 CACHED NEGATIVE \u2502 8 \u2502 INFO stats_resolver: \u2502 BLOCKED CNAME (ads) \u2502 7 \u2502 INFO stats_resolver: \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518 INFO stats_resolver: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 INFO stats_resolver: \u2502 Query type \u2502 INFO stats_resolver: \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 INFO stats_resolver: \u2502 A \u2502 8206 \u2502 INFO stats_resolver: \u2502 AAAA \u2502 7330 \u2502 INFO stats_resolver: \u2502 SRV \u2502 44 \u2502 INFO stats_resolver: \u2502 NAPTR \u2502 15 \u2502 INFO stats_resolver: \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518 INFO stats_resolver: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 INFO stats_resolver: \u2502 Response type \u2502 INFO stats_resolver: \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 INFO stats_resolver: \u2502 NOERROR \u2502 15368 \u2502 INFO stats_resolver: \u2502 NXDOMAIN \u2502 222 \u2502 INFO stats_resolver: \u2502 SERVFAIL \u2502 5 \u2502 INFO stats_resolver: \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Hint To send a signal to a process you can use kill -s USR2 <PID> or docker kill -s SIGUSR2 blocky for docker setup Debug / Profiling If http listener is enabled, pprof endpoint ( /debug/pprof ) is enabled automatically. List sources Some links/ideas for lists: Blacklists https://github.com/StevenBlack/hosts https://github.com/nickspaargaren/no-google https://energized.pro/ https://github.com/Perflyst/PiHoleBlocklist https://github.com/kboghdady/youTube_ads_4_pi-hole https://github.com/chadmayfield/my-pihole-blocklists Warning Use only blacklists from the sources you trust! Whitelists https://github.com/anudeepND/whitelist List of public DNS servers Warning DNS server provider has access to all your DNS queries (all visited domain names). Some DNS providers can use (tracking, analyzing, profiling etc.). It is recommended to use different DNS upstream servers in blocky to distribute your DNS queries over multiple providers. Please read the description before using the DNS server as upstream. Some of them provide already an ad-blocker, some filters other content. If you use external DNS server with included ad-blocker, you can't choose which domains should be blocked, and you can't use whitelisting. This is only a small excerpt of all free available DNS servers and should only be understood as an idee. Info I will NOT rate the DNS providers in the list. This list is sorted alphabetically. AdGuard CloudFlare Comodo DigitalCourage DigitaleGesellschaft Dismail dnsforge Google OpenDNS Quad9 UncensoredDNS","title":"Additional information"},{"location":"additional_information/#additional-information","text":"","title":"Additional information"},{"location":"additional_information/#print-current-configuration","text":"To print runtime configuration / statistics, you can send SIGUSR1 signal to running process. Summary Example output: INFO server: current configuration: INFO server: -> resolver: 'ClientNamesResolver' INFO server: singleNameOrder = \"[2 1]\" INFO server: externalResolver = \"upstream 'tcp+udp:192.168.178.1:53'\" INFO server: cache item count = 7 INFO server: -> resolver: 'QueryLoggingResolver' INFO server: logDir= \"/logs\" INFO server: perClient = false INFO server: logRetentionDays= 7 INFO server: -> resolver: 'StatsResolver' INFO server: stats: INFO server: - Top 20 queries INFO server: - Top 20 blocked queries INFO server: - Query count per client INFO server: - Reason INFO server: - Query type INFO server: - Response type INFO server: -> resolver: 'MetricsResolver' INFO server: metrics: INFO server: Enable = true INFO server: Path = /metrics INFO server: -> resolver: 'ConditionalUpstreamResolver' INFO server: fritz.box = \"parallel upstreams 'upstream 'tcp+udp:192.168.178.1:53''\" INFO server: -> resolver: 'CustomDNSResolver' INFO server: runtime information: ... INFO server: MEM Alloc = 9 MB INFO server: MEM HeapAlloc = 9 MB INFO server: MEM Sys = 88 MB INFO server: MEM NumGC = 1533 INFO server: RUN NumCPU = 4 INFO server: RUN NumGoroutine = 18 Hint To send a signal to a process you can use kill -s USR1 <PID> or docker kill -s SIGUSR1 blocky for docker setup","title":"Print current configuration"},{"location":"additional_information/#statistics","text":"blocky collects statistics and aggregates them hourly. If signal SIGUSR2 is received, this will print statistics for last 24 hours: Top 20 queried domains Top 20 blocked domains Query count per client ... Summary Example output: INFO stats_resolver: ******* STATS 24h ******* INFO stats_resolver: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 INFO stats_resolver: \u2502 Top 20 queries \u2502 INFO stats_resolver: \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 INFO stats_resolver: \u2502 123.fritz.box \u2502 5760 \u2502 INFO stats_resolver: \u2502 checkip.12344567.com \u2502 1431 \u2502 INFO stats_resolver: \u2502 wpad.fritz.box \u2502 379 \u2502 INFO stats_resolver: \u2502 raw.githubusercontent.com \u2502 299 \u2502 INFO stats_resolver: \u2502 grafana.com \u2502 288 \u2502 INFO stats_resolver: \u2502 www.google.com \u2502 224 \u2502 INFO stats_resolver: \u2502 www.youtube.com \u2502 193 \u2502 INFO stats_resolver: \u2502 www.googleapis.com \u2502 169 \u2502 INFO stats_resolver: \u2502 fritz.box \u2502 156 \u2502 INFO stats_resolver: \u2502 incoming.telemetry.mozilla.org \u2502 148 \u2502 INFO stats_resolver: \u2502 android.googleapis.com \u2502 114 \u2502 INFO stats_resolver: \u2502 userlocation.googleapis.com \u2502 101 \u2502 INFO stats_resolver: \u2502 play.googleapis.com \u2502 100 \u2502 INFO stats_resolver: \u2502 safebrowsing.googleapis.com \u2502 97 \u2502 INFO stats_resolver: \u2502 api-mifitsdfsdfsdfi.com \u2502 84 \u2502 INFO stats_resolver: \u2502 connectivitycheck.gstatic.com \u2502 75 \u2502 INFO stats_resolver: \u2502 fonts.gstatic.com \u2502 66 \u2502 INFO stats_resolver: \u2502 i.ytimg.com \u2502 62 \u2502 INFO stats_resolver: \u2502 android.clients.google.com \u2502 55 \u2502 INFO stats_resolver: \u2502 play.google.com \u2502 50 \u2502 INFO stats_resolver: \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518 INFO stats_resolver: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 INFO stats_resolver: \u2502 Top 20 blocked queries \u2502 INFO stats_resolver: \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2524 INFO stats_resolver: \u2502 incoming.telemetry.mozilla.org \u2502 148 \u2502 INFO stats_resolver: \u2502 googleads.g.doubleclick.net \u2502 47 \u2502 INFO stats_resolver: \u2502 data.mistat.intl.xiaomi.com \u2502 29 \u2502 INFO stats_resolver: \u2502 ssl.google-analytics.com \u2502 25 \u2502 INFO stats_resolver: \u2502 app-measurement.com \u2502 25 \u2502 INFO stats_resolver: \u2502 www.googletagmanager.com \u2502 24 \u2502 INFO stats_resolver: \u2502 www.googleadservices.com \u2502 23 \u2502 INFO stats_resolver: \u2502 privatestats.whatsapp.net \u2502 22 \u2502 INFO stats_resolver: \u2502 find.api.micloud.xiaomi.net \u2502 21 \u2502 INFO stats_resolver: \u2502 sdkconfig.ad.intl.xiaomi.com \u2502 18 \u2502 INFO stats_resolver: \u2502 sessionssdfsdfasdfam \u2502 16 \u2502 INFO stats_resolver: \u2502 pagead2.googlesyndication.com \u2502 16 \u2502 INFO stats_resolver: \u2502 firebase-settings.crashlytics.com \u2502 16 \u2502 INFO stats_resolver: \u2502 abroad.apilocate.amap.com \u2502 16 \u2502 INFO stats_resolver: \u2502 www.google-analytics.com \u2502 15 \u2502 INFO stats_resolver: \u2502 tracking.intl.miui.com \u2502 15 \u2502 INFO stats_resolver: \u2502 resolver.asdfsadfsdfsdfsdfsdfd \u2502 14 \u2502 INFO stats_resolver: \u2502 adfgdfgsfgdg \u2502 14 \u2502 INFO stats_resolver: \u2502 adservice.google.com \u2502 14 \u2502 INFO stats_resolver: \u2502 www.tns-cdfgffgdfg \u2502 12 \u2502 INFO stats_resolver: \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 INFO stats_resolver: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 INFO stats_resolver: \u2502 Query count per client \u2502 INFO stats_resolver: \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 INFO stats_resolver: \u2502 sdf.fritz.box \u2502 6338 \u2502 INFO stats_resolver: \u2502 dfdgsfgsfg.fritz.box \u2502 2075 \u2502 INFO stats_resolver: \u2502 df.fritz.box \u2502 1484 \u2502 INFO stats_resolver: \u2502 sdfgsdfg.fritz.box \u2502 1129 \u2502 INFO stats_resolver: \u2502 Android-3.fritz.box \u2502 1007 \u2502 INFO stats_resolver: \u2502 dfgsdfgsdfgsdf.fritz.box \u2502 956 \u2502 INFO stats_resolver: \u2502 172.20.0.2 \u2502 833 \u2502 INFO stats_resolver: \u2502 345345354353453iNote.fritz.box \u2502 393 \u2502 INFO stats_resolver: \u2502 R334534545-D.fritz.box \u2502 359 \u2502 INFO stats_resolver: \u2502 Android-2.fritz.box \u2502 347 \u2502 INFO stats_resolver: \u2502 Android.fritz.box \u2502 317 \u2502 INFO stats_resolver: \u2502 wererrw-TV.fritz.box \u2502 244 \u2502 INFO stats_resolver: \u2502 dfsdf-dfsddsdfsdf.fritz.box \u2502 77 \u2502 INFO stats_resolver: \u2502 sdfdf.fritz.box \u2502 18 \u2502 INFO stats_resolver: \u2502 sdfsdffsd.fritz.box \u2502 10 \u2502 INFO stats_resolver: \u2502 android-936072d2983c456a.fritz.box \u2502 8 \u2502 INFO stats_resolver: \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518 INFO stats_resolver: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 INFO stats_resolver: \u2502 Reason \u2502 INFO stats_resolver: \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 INFO stats_resolver: \u2502 CONDITIONAL \u2502 6518 \u2502 INFO stats_resolver: \u2502 CACHED \u2502 5431 \u2502 INFO stats_resolver: \u2502 BLOCKED (ads) \u2502 1104 \u2502 INFO stats_resolver: \u2502 RESOLVED (1.1.1.1:53) \u2502 928 \u2502 INFO stats_resolver: \u2502 RESOLVED (9.9.9.9:53) \u2502 630 \u2502 INFO stats_resolver: \u2502 RESOLVED (80.241.218.68:53) \u2502 374 \u2502 INFO stats_resolver: \u2502 RESOLVED (89.233.43.71:53) \u2502 277 \u2502 INFO stats_resolver: \u2502 RESOLVED (46.182.19.48:53) \u2502 177 \u2502 INFO stats_resolver: \u2502 RESOLVED (91.239.100.100:53) \u2502 77 \u2502 INFO stats_resolver: \u2502 CUSTOM DNS \u2502 39 \u2502 INFO stats_resolver: \u2502 BLOCKED (kids) \u2502 14 \u2502 INFO stats_resolver: \u2502 BLOCKED IP (ads) \u2502 9 \u2502 INFO stats_resolver: \u2502 CACHED NEGATIVE \u2502 8 \u2502 INFO stats_resolver: \u2502 BLOCKED CNAME (ads) \u2502 7 \u2502 INFO stats_resolver: \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518 INFO stats_resolver: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 INFO stats_resolver: \u2502 Query type \u2502 INFO stats_resolver: \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 INFO stats_resolver: \u2502 A \u2502 8206 \u2502 INFO stats_resolver: \u2502 AAAA \u2502 7330 \u2502 INFO stats_resolver: \u2502 SRV \u2502 44 \u2502 INFO stats_resolver: \u2502 NAPTR \u2502 15 \u2502 INFO stats_resolver: \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518 INFO stats_resolver: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 INFO stats_resolver: \u2502 Response type \u2502 INFO stats_resolver: \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 INFO stats_resolver: \u2502 NOERROR \u2502 15368 \u2502 INFO stats_resolver: \u2502 NXDOMAIN \u2502 222 \u2502 INFO stats_resolver: \u2502 SERVFAIL \u2502 5 \u2502 INFO stats_resolver: \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Hint To send a signal to a process you can use kill -s USR2 <PID> or docker kill -s SIGUSR2 blocky for docker setup","title":"Statistics"},{"location":"additional_information/#debug-profiling","text":"If http listener is enabled, pprof endpoint ( /debug/pprof ) is enabled automatically.","title":"Debug / Profiling"},{"location":"additional_information/#list-sources","text":"Some links/ideas for lists:","title":"List sources"},{"location":"additional_information/#blacklists","text":"https://github.com/StevenBlack/hosts https://github.com/nickspaargaren/no-google https://energized.pro/ https://github.com/Perflyst/PiHoleBlocklist https://github.com/kboghdady/youTube_ads_4_pi-hole https://github.com/chadmayfield/my-pihole-blocklists Warning Use only blacklists from the sources you trust!","title":"Blacklists"},{"location":"additional_information/#whitelists","text":"https://github.com/anudeepND/whitelist","title":"Whitelists"},{"location":"additional_information/#list-of-public-dns-servers","text":"Warning DNS server provider has access to all your DNS queries (all visited domain names). Some DNS providers can use (tracking, analyzing, profiling etc.). It is recommended to use different DNS upstream servers in blocky to distribute your DNS queries over multiple providers. Please read the description before using the DNS server as upstream. Some of them provide already an ad-blocker, some filters other content. If you use external DNS server with included ad-blocker, you can't choose which domains should be blocked, and you can't use whitelisting. This is only a small excerpt of all free available DNS servers and should only be understood as an idee. Info I will NOT rate the DNS providers in the list. This list is sorted alphabetically. AdGuard CloudFlare Comodo DigitalCourage DigitaleGesellschaft Dismail dnsforge Google OpenDNS Quad9 UncensoredDNS","title":"List of public DNS servers"},{"location":"configuration/","text":"Configuration This chapter describes all configuration options in config.yaml . You can download a reference file with all configuration properties as JSON . Basic configuration Parameter Mandatory Default value Description port no 53 Port to serve DNS endpoint ( TCP and UDP ) httpPort no 0 HTTP listener port. If > 0, will be used for prometheus metrics, pprof, REST API , DoH ... httpsPort no 0 HTTPS listener port. If > 0, will be used for prometheus metrics, pprof, REST API , DoH ... httpsCertFile yes, if httpsPort > 0 path to cert and key file for SSL encryption httpsKeyFile yes, if httpsPort > 0 path to cert and key file for SSL encryption bootstrapDns no use this DNS server to resolve blacklist urls and upstream DNS servers ( DoH ). Useful if no DNS resolver is configured and blocky needs to resolve a host name. Format net:IP:port, net must be udp or tcp disableIPv6 no false Drop all AAAA query if set to true logLevel no info Log level (one from debug, info, warn, error) logFormat no text Log format (text or json). logTimestamp no true Log time stamps (true or false). Example port : 53 httpPort : 4000 httpsPort : 443 logLevel : info Upstream configuration To resolve a DNS query, blocky needs external public or private DNS resolvers. Blocky supports DNS resolvers with following network protocols (net part of the resolver URL): udp (only UDP ) tcp (only TCP ) tcp+udp ( UDP and TCP , dependent on query type) https (aka DoH ) tcp-tls (aka DoT ) Hint You can (and should!) configure multiple DNS resolvers. Blocky picks 2 random resolvers from the list for each query and returns the answer from the fastest one. This improves your network speed and increases your privacy - your DNS traffic will be distributed over multiple providers. Each resolver must be defined as a string in following format: [net:]host:[port][/path] . Parameter Mandatory Value Default value net no one of (tcp+udp, tcp, udp, tcp-tls or https) tcp+udp host yes full qualified domain name or ip address port no number < 65535 53 for udp/tcp, 853 for tcp-tls and 443 for https Blocky needs at least the configuration of the default group. This group will be used as a fallback, if no client specific resolver configuration is available. You can use the client name (see Client name lookup ), client's IP address or a client subnet as CIDR notation. Tip You can use * as wildcard for the sequence of any character or [0-9] as number range Example upstream : default : - 46.182.19.48 - 80.241.218.68 - tcp-tls:fdns1.dismail.de:853 - https://dns.digitale-gesellschaft.ch/dns-query laptop* : - 123.123.123.123 10.43.8.67/28 : - 1.1.1.1 - 9.9.9.9 Use 123.123.123.123 as single upstream DNS resolver for client laptop-home, 1.1.1.1 and 9.9.9.9 for all clients in the sub-net 10.43.8.67/28 and 4 resolvers (default) for all others clients. Note Blocky needs at least one upstream DNS server See List of public DNS servers if you need some ideas, which public free DNS server you could use. Custom DNS You can define your own domain name to IP mappings. For example, you can use a user-friendly name for a network printer or define a domain name for your local device on order to use the HTTPS certificate. Multiple IP addresses for one domain must be separated by a comma. Example customDNS : mapping : printer.lan : 192.168.178.3 otherdevice.lan : 192.168.178.15,2001:0db8:85a3:08d3:1319:8a2e:0370:7344 This configuration will also resolve any subdomain of the defined domain. For example a query \"printer.lan\" or \" my.printer.lan\" will return 192.168.178.3 as IP address. Conditional DNS resolution You can define, which DNS resolver(s) should be used for queries for the particular domain (with all sub-domains). This is for example useful, if you want to reach devices in your local network by the name. Since only your router know which hostname belongs to which IP address, all DNS queries for the local network should be redirected to the router. With the optional parameter rewrite you can replace domain part of the query with the defined part before the resolver lookup is performed. Example conditional : rewrite : example.com : fritz.box replace-me.com : with-this.com mapping : fritz.box : udp:192.168.178.1 lan.net : udp:192.170.1.2,udp:192.170.1.3 # for reverse DNS lookups of local devices 178.168.192.in-addr.arpa : udp:192.168.178.1 In this example, a DNS query \"client.fritz.box\" will be redirected to the router's DNS server at 192.168.178.1 and client.lan.net to 192.170.1.2 and 192.170.1.3. The query client.example.com will be rewritten to \"client.fritz.box\" and also redirected to the resolver at 192.168.178.1 In this example, a DNS query \"client.fritz.box\" will be redirected to the router's DNS server at 192.168.178.1 and client.lan.net to 192.170.1.2 and 192.170.1.3. Client name lookup Blocky can try to resolve a user-friendly client name from the IP address. This is useful for defining of blocking groups, since IP address can change dynamically. Blocky uses rDNS to retrieve client's name. To use this feature, you can configure a DNS server for client lookup (typically your router). You can also define client names manually per IP address. Single name order Some routers return multiple names for the client (host name and user defined name). With parameter clientLookup.singleNameOrder you can specify, which of retrieved names should be used. Custom client name mapping You can also map a particular client name to one (or more) IP (ipv4/ipv6) addresses. Parameter clientLookup.clients contains a map of client name and multiple IP addresses. Example clientLookup : upstream : udp:192.168.178.1 singleNameOrder : - 2 - 1 clients : laptop : - 192.168.178.29 Use 192.168.178.1 for rDNS lookup. Take second name if present, if not take first name. IP address 192.168.178.29 is mapped to laptop as client name. Blocking and whitelisting Blocky can download and use external lists with domains or IP addresses to block DNS query (e.g. advertisement, malware, trackers, adult sites). You can group several list sources together and define the blocking behavior per client. External blacklists must be in the well-known Hosts format . Blocky uses DNS sinkhole approach to block a DNS query. Domain name from the request, IP address from the response, and the CNAME record will be checked against configured blacklists. To avoid overblocking, you can define or use already existing whitelists. Definition black and whitelists Each black or whitelist can be either a path to the local file, or a URL to download. All Urls must be grouped to a group name. Example blocking : blackLists : ads : - https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt - https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts special : - https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews/hosts whiteLists : ads : - whitelist.txt In this example you can see 2 groups: ads with 2 lists and special with one list. One local whitelist was defined for the ads group. Warning If the same group has black and whitelists, whitelists will be used to disable particular blacklist entries. If a group has only whitelist entries -> this means only domains from this list are allowed, all other domains will be blocked Client groups In this configuration section, you can define, which blocking group(s) should be used for which client in your network. Example: All clients should use the ads group, which blocks advertisement and kids devices should use the adult group, which blocky adult sites. Clients without a group assignment will use automatically the default group. You can use the client name (see Client name lookup ), client's IP address or a client subnet as CIDR notation. Example blocking : clientGroupsBlock : # default will be used, if no special definition for a client name exists default : - ads - special laptop* : - ads 192.168.178.1/24 : - special kid-laptop : - ads - adult All queries from network clients, whose device name starts with laptop , will be filtered against the ads group's lists. All devices from the subnet 192.168.178.1/24 against the special group and kid-laptop against ads and adult . All other clients: ads and special . Tip You can use * as wildcard for the sequence of any character or [0-9] as number range Block type You can configure, which response should be sent to the client, if a requested query is blocked (only for A and AAAA queries, NXDOMAIN for other types): blockType Example Description zeroIP zeroIP This is the ** default** block type. Server returns 0.0.0.0 (or :: for IPv6) as result for A and AAAA queries nxDomain nxDomain return NXDOMAIN as return code custom IPs 192.100.100.15, 2001:0db8:85a3:08d3:1319:8a2e:0370:7344 comma separated list of destination IP addresses. Should contain ipv4 and ipv6 to cover all query types. Useful with running web server on this address to display the \"blocked\" page. Example blocking : blockType : nxDomain List refresh period To keep the list cache up-to-date, blocky will periodically download and reload all external lists. Default period is 4 hours . You can configure this by setting the blocking.refreshPeriod parameter to a value in minutes . Negative value will deactivate automatically refresh. Example blocking : refreshPeriod : 60 Refresh every hour. Caching Each DNS response has a TTL (Time-to-live) value. This value defines, how long is the record valid in seconds. The values are maintained by domain owners, server administrators etc. Blocky caches the answers from all resolved queries in own cache in order to avoid repeated requests. This reduces the DNS traffic and increases the network speed, since blocky can serve the result immediately from the cache. With following parameters you can tune the caching behavior: Warning Wrong values can significantly increase external DNS traffic or memory consumption. Parameter Mandatory Default value Description caching.minTime no 0 (use TTL ) Amount in minutes, how long a response must be cached (min value). If <=0, use response's TTL , if >0 use this value, if TTL is smaller caching.maxTime no 0 (use TTL ) Amount in minutes, how long a response must be cached (max value). If <0, do not cache responses. If 0, use TTL . If > 0, use this value, if TTL is greater caching.prefetching no false if true, blocky will preload DNS results for often used queries (names queried more than 5 times in a 2 hour time window). Results in cache will be loaded again on their expire ( TTL ). This improves the response time for often used queries, but significantly increases external traffic. It is recommended to increase \"minTime\" to reduce the number of prefetch queries to external resolvers. Example blocking : minTime : 5 maxTime : 30 prefetching : true Prometheus Blocky can expose various metrics for prometheus. To use the prometheus feature, the HTTP listener must be enabled ( see Basic Configuration ). Parameter Mandatory Default value Description prometheus.enable no false If true, enables prometheus metrics prometheus.path no /metrics URL path to the metrics endpoint Example prometheus : enable : true path : /metrics Query logging You can enable the logging of DNS queries (question, answer, client, duration etc) to a daily CSV file. This file can be opened in Excel or OpenOffice writer for analyse purposes. Warning Query file contain sensitive information. Please ensure to inform users, if you log their queries. Configuration parameters: Parameter Mandatory Default value Description queryLog.dir no If defined, directory for writing the logs queryLog.perClient no false if true, write one file per client. Writes all queries to single file otherwise queryLog.logRetentionDays no 0 if > 0, deletes log files which are older than ... days Hint Please ensure, that the log directory is writable. If you use docker, please ensure, that the directory is properly mounted (e.g. volume) Example queryLog : dir : /logs perClient : true logRetentionDays : 7 HTTPS configuration (for DoH ) See Wiki - Configuration of HTTPS for detailed information, how to configure HTTPS . DoH url: https://host:port/dns-query","title":"Configuration"},{"location":"configuration/#configuration","text":"This chapter describes all configuration options in config.yaml . You can download a reference file with all configuration properties as JSON .","title":"Configuration"},{"location":"configuration/#basic-configuration","text":"Parameter Mandatory Default value Description port no 53 Port to serve DNS endpoint ( TCP and UDP ) httpPort no 0 HTTP listener port. If > 0, will be used for prometheus metrics, pprof, REST API , DoH ... httpsPort no 0 HTTPS listener port. If > 0, will be used for prometheus metrics, pprof, REST API , DoH ... httpsCertFile yes, if httpsPort > 0 path to cert and key file for SSL encryption httpsKeyFile yes, if httpsPort > 0 path to cert and key file for SSL encryption bootstrapDns no use this DNS server to resolve blacklist urls and upstream DNS servers ( DoH ). Useful if no DNS resolver is configured and blocky needs to resolve a host name. Format net:IP:port, net must be udp or tcp disableIPv6 no false Drop all AAAA query if set to true logLevel no info Log level (one from debug, info, warn, error) logFormat no text Log format (text or json). logTimestamp no true Log time stamps (true or false). Example port : 53 httpPort : 4000 httpsPort : 443 logLevel : info","title":"Basic configuration"},{"location":"configuration/#upstream-configuration","text":"To resolve a DNS query, blocky needs external public or private DNS resolvers. Blocky supports DNS resolvers with following network protocols (net part of the resolver URL): udp (only UDP ) tcp (only TCP ) tcp+udp ( UDP and TCP , dependent on query type) https (aka DoH ) tcp-tls (aka DoT ) Hint You can (and should!) configure multiple DNS resolvers. Blocky picks 2 random resolvers from the list for each query and returns the answer from the fastest one. This improves your network speed and increases your privacy - your DNS traffic will be distributed over multiple providers. Each resolver must be defined as a string in following format: [net:]host:[port][/path] . Parameter Mandatory Value Default value net no one of (tcp+udp, tcp, udp, tcp-tls or https) tcp+udp host yes full qualified domain name or ip address port no number < 65535 53 for udp/tcp, 853 for tcp-tls and 443 for https Blocky needs at least the configuration of the default group. This group will be used as a fallback, if no client specific resolver configuration is available. You can use the client name (see Client name lookup ), client's IP address or a client subnet as CIDR notation. Tip You can use * as wildcard for the sequence of any character or [0-9] as number range Example upstream : default : - 46.182.19.48 - 80.241.218.68 - tcp-tls:fdns1.dismail.de:853 - https://dns.digitale-gesellschaft.ch/dns-query laptop* : - 123.123.123.123 10.43.8.67/28 : - 1.1.1.1 - 9.9.9.9 Use 123.123.123.123 as single upstream DNS resolver for client laptop-home, 1.1.1.1 and 9.9.9.9 for all clients in the sub-net 10.43.8.67/28 and 4 resolvers (default) for all others clients. Note Blocky needs at least one upstream DNS server See List of public DNS servers if you need some ideas, which public free DNS server you could use.","title":"Upstream configuration"},{"location":"configuration/#custom-dns","text":"You can define your own domain name to IP mappings. For example, you can use a user-friendly name for a network printer or define a domain name for your local device on order to use the HTTPS certificate. Multiple IP addresses for one domain must be separated by a comma. Example customDNS : mapping : printer.lan : 192.168.178.3 otherdevice.lan : 192.168.178.15,2001:0db8:85a3:08d3:1319:8a2e:0370:7344 This configuration will also resolve any subdomain of the defined domain. For example a query \"printer.lan\" or \" my.printer.lan\" will return 192.168.178.3 as IP address.","title":"Custom DNS"},{"location":"configuration/#conditional-dns-resolution","text":"You can define, which DNS resolver(s) should be used for queries for the particular domain (with all sub-domains). This is for example useful, if you want to reach devices in your local network by the name. Since only your router know which hostname belongs to which IP address, all DNS queries for the local network should be redirected to the router. With the optional parameter rewrite you can replace domain part of the query with the defined part before the resolver lookup is performed. Example conditional : rewrite : example.com : fritz.box replace-me.com : with-this.com mapping : fritz.box : udp:192.168.178.1 lan.net : udp:192.170.1.2,udp:192.170.1.3 # for reverse DNS lookups of local devices 178.168.192.in-addr.arpa : udp:192.168.178.1 In this example, a DNS query \"client.fritz.box\" will be redirected to the router's DNS server at 192.168.178.1 and client.lan.net to 192.170.1.2 and 192.170.1.3. The query client.example.com will be rewritten to \"client.fritz.box\" and also redirected to the resolver at 192.168.178.1 In this example, a DNS query \"client.fritz.box\" will be redirected to the router's DNS server at 192.168.178.1 and client.lan.net to 192.170.1.2 and 192.170.1.3.","title":"Conditional DNS resolution"},{"location":"configuration/#client-name-lookup","text":"Blocky can try to resolve a user-friendly client name from the IP address. This is useful for defining of blocking groups, since IP address can change dynamically. Blocky uses rDNS to retrieve client's name. To use this feature, you can configure a DNS server for client lookup (typically your router). You can also define client names manually per IP address.","title":"Client name lookup"},{"location":"configuration/#single-name-order","text":"Some routers return multiple names for the client (host name and user defined name). With parameter clientLookup.singleNameOrder you can specify, which of retrieved names should be used.","title":"Single name order"},{"location":"configuration/#custom-client-name-mapping","text":"You can also map a particular client name to one (or more) IP (ipv4/ipv6) addresses. Parameter clientLookup.clients contains a map of client name and multiple IP addresses. Example clientLookup : upstream : udp:192.168.178.1 singleNameOrder : - 2 - 1 clients : laptop : - 192.168.178.29 Use 192.168.178.1 for rDNS lookup. Take second name if present, if not take first name. IP address 192.168.178.29 is mapped to laptop as client name.","title":"Custom client name mapping"},{"location":"configuration/#blocking-and-whitelisting","text":"Blocky can download and use external lists with domains or IP addresses to block DNS query (e.g. advertisement, malware, trackers, adult sites). You can group several list sources together and define the blocking behavior per client. External blacklists must be in the well-known Hosts format . Blocky uses DNS sinkhole approach to block a DNS query. Domain name from the request, IP address from the response, and the CNAME record will be checked against configured blacklists. To avoid overblocking, you can define or use already existing whitelists.","title":"Blocking and whitelisting"},{"location":"configuration/#definition-black-and-whitelists","text":"Each black or whitelist can be either a path to the local file, or a URL to download. All Urls must be grouped to a group name. Example blocking : blackLists : ads : - https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt - https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts special : - https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews/hosts whiteLists : ads : - whitelist.txt In this example you can see 2 groups: ads with 2 lists and special with one list. One local whitelist was defined for the ads group. Warning If the same group has black and whitelists, whitelists will be used to disable particular blacklist entries. If a group has only whitelist entries -> this means only domains from this list are allowed, all other domains will be blocked","title":"Definition black and whitelists"},{"location":"configuration/#client-groups","text":"In this configuration section, you can define, which blocking group(s) should be used for which client in your network. Example: All clients should use the ads group, which blocks advertisement and kids devices should use the adult group, which blocky adult sites. Clients without a group assignment will use automatically the default group. You can use the client name (see Client name lookup ), client's IP address or a client subnet as CIDR notation. Example blocking : clientGroupsBlock : # default will be used, if no special definition for a client name exists default : - ads - special laptop* : - ads 192.168.178.1/24 : - special kid-laptop : - ads - adult All queries from network clients, whose device name starts with laptop , will be filtered against the ads group's lists. All devices from the subnet 192.168.178.1/24 against the special group and kid-laptop against ads and adult . All other clients: ads and special . Tip You can use * as wildcard for the sequence of any character or [0-9] as number range","title":"Client groups"},{"location":"configuration/#block-type","text":"You can configure, which response should be sent to the client, if a requested query is blocked (only for A and AAAA queries, NXDOMAIN for other types): blockType Example Description zeroIP zeroIP This is the ** default** block type. Server returns 0.0.0.0 (or :: for IPv6) as result for A and AAAA queries nxDomain nxDomain return NXDOMAIN as return code custom IPs 192.100.100.15, 2001:0db8:85a3:08d3:1319:8a2e:0370:7344 comma separated list of destination IP addresses. Should contain ipv4 and ipv6 to cover all query types. Useful with running web server on this address to display the \"blocked\" page. Example blocking : blockType : nxDomain","title":"Block type"},{"location":"configuration/#list-refresh-period","text":"To keep the list cache up-to-date, blocky will periodically download and reload all external lists. Default period is 4 hours . You can configure this by setting the blocking.refreshPeriod parameter to a value in minutes . Negative value will deactivate automatically refresh. Example blocking : refreshPeriod : 60 Refresh every hour.","title":"List refresh period"},{"location":"configuration/#caching","text":"Each DNS response has a TTL (Time-to-live) value. This value defines, how long is the record valid in seconds. The values are maintained by domain owners, server administrators etc. Blocky caches the answers from all resolved queries in own cache in order to avoid repeated requests. This reduces the DNS traffic and increases the network speed, since blocky can serve the result immediately from the cache. With following parameters you can tune the caching behavior: Warning Wrong values can significantly increase external DNS traffic or memory consumption. Parameter Mandatory Default value Description caching.minTime no 0 (use TTL ) Amount in minutes, how long a response must be cached (min value). If <=0, use response's TTL , if >0 use this value, if TTL is smaller caching.maxTime no 0 (use TTL ) Amount in minutes, how long a response must be cached (max value). If <0, do not cache responses. If 0, use TTL . If > 0, use this value, if TTL is greater caching.prefetching no false if true, blocky will preload DNS results for often used queries (names queried more than 5 times in a 2 hour time window). Results in cache will be loaded again on their expire ( TTL ). This improves the response time for often used queries, but significantly increases external traffic. It is recommended to increase \"minTime\" to reduce the number of prefetch queries to external resolvers. Example blocking : minTime : 5 maxTime : 30 prefetching : true","title":"Caching"},{"location":"configuration/#prometheus","text":"Blocky can expose various metrics for prometheus. To use the prometheus feature, the HTTP listener must be enabled ( see Basic Configuration ). Parameter Mandatory Default value Description prometheus.enable no false If true, enables prometheus metrics prometheus.path no /metrics URL path to the metrics endpoint Example prometheus : enable : true path : /metrics","title":"Prometheus"},{"location":"configuration/#query-logging","text":"You can enable the logging of DNS queries (question, answer, client, duration etc) to a daily CSV file. This file can be opened in Excel or OpenOffice writer for analyse purposes. Warning Query file contain sensitive information. Please ensure to inform users, if you log their queries. Configuration parameters: Parameter Mandatory Default value Description queryLog.dir no If defined, directory for writing the logs queryLog.perClient no false if true, write one file per client. Writes all queries to single file otherwise queryLog.logRetentionDays no 0 if > 0, deletes log files which are older than ... days Hint Please ensure, that the log directory is writable. If you use docker, please ensure, that the directory is properly mounted (e.g. volume) Example queryLog : dir : /logs perClient : true logRetentionDays : 7","title":"Query logging"},{"location":"configuration/#https-configuration-for-doh","text":"See Wiki - Configuration of HTTPS for detailed information, how to configure HTTPS . DoH url: https://host:port/dns-query","title":"HTTPS configuration (for DoH)"},{"location":"installation/","text":"Installation You can choose one of the following installation options: Run as standalone binary Run as docker container Kubernetes with helm chart Prepare your configuration Blocky uses one YAML file as configuration. Create new config.yaml with your configuration ( see Configuration for more details and all configuration options). Simple configuration file, which enables only basic features: upstream : externalResolvers : - 46.182.19.48 - 80.241.218.68 - tcp-tls:fdns1.dismail.de:853 - https://dns.digitale-gesellschaft.ch/dns-query blocking : blackLists : ads : - https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts clientGroupsBlock : default : - ads port : 53 httpPort : 4000 Run as standalone binary Download the binary file from GitHub for your architecture and run ./blocky --config config.yml . Warning Please be aware, if you want to use port 53 or 953 on Linux you should add CAP_NET_BIND_SERVICE capability to the binary or run with root privileges (running as root is not recommended). Run with docker Alternative registry Blocky docker images are deployed to DockerHub ( spx01/blocky ) and GitHub Container Registry ( ghcr.io/0xerr0r/blocky ) . Docker from command line Execute following command from the command line: docker run --name blocky -v /path/to/config.yml:/app/config.yml -p 4000:4000 -p 53:53/udp spx01/blocky Run with docker-compose Create following docker-compose.yml file version : \"2.1\" services : blocky : image : spx01/blocky container_name : blocky restart : unless-stopped ports : - \"53:53/tcp\" - \"53:53/udp\" - \"4000:4000/tcp\" environment : - TZ=Europe/Berlin # Optional to synchronize the log timestamp with host volumes : # config file - ./config.yml:/app/config.yml and start docker container with docker-compose up -d Advanced setup Following example shows, how to run blocky in a docker container and store query logs on a SAMBA share. Local black and whitelists directories are mounted as volume. You can create own black or whitelists in these directories and define the path like '/app/whitelists/whitelist.txt' in the config file. Example version : \"2.1\" services : blocky : image : spx01/blocky container_name : blocky restart : unless-stopped ports : - \"53:53/tcp\" - \"53:53/udp\" - \"4000:4000/tcp\" # Prometheus stats (if enabled). environment : - TZ=Europe/Berlin volumes : # config file - ./config.yml:/app/config.yml # write query logs in this volume - queryLogs:/logs # put your custom white and blacklists in these directories - ./blacklists:/app/blacklists/ - ./whitelists:/app/whitelists/ volumes : queryLogs : driver : local driver_opts : type : cifs o : username=USER,password=PASSWORD,rw device : //NAS_HOSTNAME/blocky Run with helm chart on Kubernetes See this repo or artifacthub for details about running blocky via helm in kubernetes.","title":"Installation"},{"location":"installation/#installation","text":"You can choose one of the following installation options: Run as standalone binary Run as docker container Kubernetes with helm chart","title":"Installation"},{"location":"installation/#prepare-your-configuration","text":"Blocky uses one YAML file as configuration. Create new config.yaml with your configuration ( see Configuration for more details and all configuration options). Simple configuration file, which enables only basic features: upstream : externalResolvers : - 46.182.19.48 - 80.241.218.68 - tcp-tls:fdns1.dismail.de:853 - https://dns.digitale-gesellschaft.ch/dns-query blocking : blackLists : ads : - https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts clientGroupsBlock : default : - ads port : 53 httpPort : 4000","title":"Prepare your configuration"},{"location":"installation/#run-as-standalone-binary","text":"Download the binary file from GitHub for your architecture and run ./blocky --config config.yml . Warning Please be aware, if you want to use port 53 or 953 on Linux you should add CAP_NET_BIND_SERVICE capability to the binary or run with root privileges (running as root is not recommended).","title":"Run as standalone binary"},{"location":"installation/#run-with-docker","text":"","title":"Run with docker"},{"location":"installation/#alternative-registry","text":"Blocky docker images are deployed to DockerHub ( spx01/blocky ) and GitHub Container Registry ( ghcr.io/0xerr0r/blocky ) .","title":"Alternative registry"},{"location":"installation/#docker-from-command-line","text":"Execute following command from the command line: docker run --name blocky -v /path/to/config.yml:/app/config.yml -p 4000:4000 -p 53:53/udp spx01/blocky","title":"Docker from command line"},{"location":"installation/#run-with-docker-compose","text":"Create following docker-compose.yml file version : \"2.1\" services : blocky : image : spx01/blocky container_name : blocky restart : unless-stopped ports : - \"53:53/tcp\" - \"53:53/udp\" - \"4000:4000/tcp\" environment : - TZ=Europe/Berlin # Optional to synchronize the log timestamp with host volumes : # config file - ./config.yml:/app/config.yml and start docker container with docker-compose up -d","title":"Run with docker-compose"},{"location":"installation/#advanced-setup","text":"Following example shows, how to run blocky in a docker container and store query logs on a SAMBA share. Local black and whitelists directories are mounted as volume. You can create own black or whitelists in these directories and define the path like '/app/whitelists/whitelist.txt' in the config file. Example version : \"2.1\" services : blocky : image : spx01/blocky container_name : blocky restart : unless-stopped ports : - \"53:53/tcp\" - \"53:53/udp\" - \"4000:4000/tcp\" # Prometheus stats (if enabled). environment : - TZ=Europe/Berlin volumes : # config file - ./config.yml:/app/config.yml # write query logs in this volume - queryLogs:/logs # put your custom white and blacklists in these directories - ./blacklists:/app/blacklists/ - ./whitelists:/app/whitelists/ volumes : queryLogs : driver : local driver_opts : type : cifs o : username=USER,password=PASSWORD,rw device : //NAS_HOSTNAME/blocky","title":"Advanced setup"},{"location":"installation/#run-with-helm-chart-on-kubernetes","text":"See this repo or artifacthub for details about running blocky via helm in kubernetes.","title":"Run with helm chart on Kubernetes"},{"location":"interfaces/","text":"Interfaces REST API If http listener is enabled, blocky provides REST API . You can browse the API documentation (Swagger) documentation under https://0xERR0R.github.io/blocky/swagger.html . CLI Blocky provides a CLI interface to control. This interface uses internally the REST API . To run the CLI , please ensure, that blocky DNS server is running, then execute blocky help for help or ./blocky blocking enable to enable blocking ./blocky blocking disable to disable blocking ./blocky blocking disable --duration [duration] to disable blocking for a certain amount of time (30s, 5m, 10m30s, ...) ./blocky blocking disable --groups ads,othergroup to disable blocking only for special groups ./blocky blocking status to print current status of blocking ./blocky query <domain> execute DNS query (A) (simple replacement for dig, useful for debug purposes) ./blocky query <domain> --type <queryType> execute DNS query with passed query type (A, AAAA, MX, ...) ./blocky lists refresh reloads all white and blacklists Tip To run this inside docker run docker exec blocky ./blocky blocking status","title":"Interfaces"},{"location":"interfaces/#interfaces","text":"","title":"Interfaces"},{"location":"interfaces/#rest-api","text":"If http listener is enabled, blocky provides REST API . You can browse the API documentation (Swagger) documentation under https://0xERR0R.github.io/blocky/swagger.html .","title":"REST API"},{"location":"interfaces/#cli","text":"Blocky provides a CLI interface to control. This interface uses internally the REST API . To run the CLI , please ensure, that blocky DNS server is running, then execute blocky help for help or ./blocky blocking enable to enable blocking ./blocky blocking disable to disable blocking ./blocky blocking disable --duration [duration] to disable blocking for a certain amount of time (30s, 5m, 10m30s, ...) ./blocky blocking disable --groups ads,othergroup to disable blocking only for special groups ./blocky blocking status to print current status of blocking ./blocky query <domain> execute DNS query (A) (simple replacement for dig, useful for debug purposes) ./blocky query <domain> --type <queryType> execute DNS query with passed query type (A, AAAA, MX, ...) ./blocky lists refresh reloads all white and blacklists Tip To run this inside docker run docker exec blocky ./blocky blocking status","title":"CLI"},{"location":"network_configuration/","text":"Network configuration In order, to benefit from all the advantages of blocky like ad-blocking, privacy and speed, it is necessary to use blocky as DNS server for your devices. You can configure DNS server on each device manually or use DHCP in your network router and push the right settings to your device. With this approach, you will configure blocky only once in your router and each device in your network will automatically use blocky as DNS server. Transparent configuration with DHCP Let us assume, blocky is installed on a Raspberry PI with fix IP address 192.168.178.2 . Each device which connects to the router will obtain an IP address and receive the network configuration. The IP address of the Raspberry PI should be pushed to the device as DNS server. \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 Raspberry PI \u2502 \u2502 Router \u2502 \u2502 blocky \u2502 \u2502 \u2502 \u2502 192.168.178.2 \u2502 \u2514\u2500\u25b2\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u25b2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u25021 \u2502 \u2502 3 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 2 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba Network device \u2502 \u2502 \u2502 Android \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 1 - Network device asks the DHCP server (on Router) for the network configuration 2 - Router assigns a free IP address to the device and says \"Use 192.168.178.2\" as DNS server 3 - Clients makes DNS queries and is happy to use blocky Warning It is necessary to assign the server which runs blocky (e.g. Raspberry PI) a fix IP address. Example configuration with FritzBox To configure the DNS server in the FritzBox, please open in the FritzBox web interface: in navigation menu on the left side: Home Network -> Network Network Settings tab on the top \"IPv4 Configuration\" Button at the bottom op the page Enter the IP address of blocky under \"Local DNS server\", see screenshot","title":"Network configuration"},{"location":"network_configuration/#network-configuration","text":"In order, to benefit from all the advantages of blocky like ad-blocking, privacy and speed, it is necessary to use blocky as DNS server for your devices. You can configure DNS server on each device manually or use DHCP in your network router and push the right settings to your device. With this approach, you will configure blocky only once in your router and each device in your network will automatically use blocky as DNS server.","title":"Network configuration"},{"location":"network_configuration/#transparent-configuration-with-dhcp","text":"Let us assume, blocky is installed on a Raspberry PI with fix IP address 192.168.178.2 . Each device which connects to the router will obtain an IP address and receive the network configuration. The IP address of the Raspberry PI should be pushed to the device as DNS server. \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 Raspberry PI \u2502 \u2502 Router \u2502 \u2502 blocky \u2502 \u2502 \u2502 \u2502 192.168.178.2 \u2502 \u2514\u2500\u25b2\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u25b2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u25021 \u2502 \u2502 3 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 2 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba Network device \u2502 \u2502 \u2502 Android \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 1 - Network device asks the DHCP server (on Router) for the network configuration 2 - Router assigns a free IP address to the device and says \"Use 192.168.178.2\" as DNS server 3 - Clients makes DNS queries and is happy to use blocky Warning It is necessary to assign the server which runs blocky (e.g. Raspberry PI) a fix IP address.","title":"Transparent configuration with DHCP"},{"location":"network_configuration/#example-configuration-with-fritzbox","text":"To configure the DNS server in the FritzBox, please open in the FritzBox web interface: in navigation menu on the left side: Home Network -> Network Network Settings tab on the top \"IPv4 Configuration\" Button at the bottom op the page Enter the IP address of blocky under \"Local DNS server\", see screenshot","title":"Example configuration with FritzBox"},{"location":"prometheus_grafana/","text":"Integration in Prometheus / Grafana Prometheus export Blocky can optionally export metrics for Prometheus . Following metrics will be exported: name Description blocky_blacklist_cache / blocky_whitelist_cache Number of entries in blacklist/whitelist cache, partitioned by group blocky_error_total Counter for internal errors blocky_query_total Number of total queries, partitioned by client and DNS request type (A, AAAA, PTR, etc) blocky_request_duration_ms_bucket Request duration histogram, partitioned by response type (Blocked, cached, etc) blocky_response_total Number of responses, partitioned by response type (Blocked, cached, etc), DNS response code, and reason blocky_blocking_enabled 1 if blocking is enabled, 0 otherwise blocky_cache_entry_count Number of entries in cache blocky_cache_hit_count / blocky_cache_miss_count Cache hit/miss counters blocky_prefetch_count Amount of prefetched DNS responses blocky_prefetch_domain_name_cache_count Amount of domain names being prefetched Grafana dashboard Example Grafana dashboard definition as JSON or at grafana.com . This dashboard shows all relevant statistics and allows enabling and disabling the blocking status. Grafana configuration Please install grafana-piechart-panel and set disable-sanitize-html in config or as env to use control buttons to enable/disable the blocking status. Grafana and Prometheus example project This repo contains example docker-compose.yml with blocky, prometheus (with configured scraper for blocky) and grafana with prometheus datasource.","title":"Prometheus / Grafana"},{"location":"prometheus_grafana/#integration-in-prometheus-grafana","text":"","title":"Integration in Prometheus / Grafana"},{"location":"prometheus_grafana/#prometheus-export","text":"Blocky can optionally export metrics for Prometheus . Following metrics will be exported: name Description blocky_blacklist_cache / blocky_whitelist_cache Number of entries in blacklist/whitelist cache, partitioned by group blocky_error_total Counter for internal errors blocky_query_total Number of total queries, partitioned by client and DNS request type (A, AAAA, PTR, etc) blocky_request_duration_ms_bucket Request duration histogram, partitioned by response type (Blocked, cached, etc) blocky_response_total Number of responses, partitioned by response type (Blocked, cached, etc), DNS response code, and reason blocky_blocking_enabled 1 if blocking is enabled, 0 otherwise blocky_cache_entry_count Number of entries in cache blocky_cache_hit_count / blocky_cache_miss_count Cache hit/miss counters blocky_prefetch_count Amount of prefetched DNS responses blocky_prefetch_domain_name_cache_count Amount of domain names being prefetched","title":"Prometheus export"},{"location":"prometheus_grafana/#grafana-dashboard","text":"Example Grafana dashboard definition as JSON or at grafana.com . This dashboard shows all relevant statistics and allows enabling and disabling the blocking status.","title":"Grafana dashboard"},{"location":"prometheus_grafana/#grafana-configuration","text":"Please install grafana-piechart-panel and set disable-sanitize-html in config or as env to use control buttons to enable/disable the blocking status.","title":"Grafana configuration"},{"location":"prometheus_grafana/#grafana-and-prometheus-example-project","text":"This repo contains example docker-compose.yml with blocky, prometheus (with configured scraper for blocky) and grafana with prometheus datasource.","title":"Grafana and Prometheus example project"},{"location":"includes/abbreviations/","text":"","title":"Abbreviations"}]}